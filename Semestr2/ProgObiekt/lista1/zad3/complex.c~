#include <stdio.h>
#include <stdlib.h>
#include "complexc.h"

void print( struct Complex a);
{
	char znak = '+';
	if(a.im < 0) znak = '-';
	printf("%.4f",a.re);
	if(a.im != 0) printf(" %s %.4f\n",znak,a.im);
}

 struct Complex* add( struct Complex a,  struct Complex b)
{
	 struct Complex *c = malloc(sizeof(struct Complex));
	c->re = a.re + b.re;
	c->im = a.im + b.im;
	return c;
}

void add_m( struct Complex *a,  struct Complex *b)
{
	b->re += a->re;
	b->im += a->im;
}

 struct Complex* sub( struct Complex a,  struct Complex b)
{
	 struct Complex *c = malloc(sizeof(struct Complex));
	c->re = a.re - b.re;
	c->im = a.im - b.im;
	return c;
}

void sub_m( struct Complex *a,  struct Complex *b)
{
	b->re -= a->re;
	b->im -= a->im;
}

 struct Complex* mul( struct Complex a,  struct Complex b)
{
	 struct Complex *c = malloc(sizeof( struct Complex));
	c->re = (a.re * b.re) - (a.im * b.im);
	c->im = (a.re * b.im)+(a.im * b.re);
	return c;
}

void mul_m( struct Complex *a,  struct Complex *b)
{
	b->re = (a->re * b->re) - (a->im * b->im);
	b->im = (a->re * b->im) + (a->im * b->re);
}

 struct Complex* div( struct Complex a,  struct Complex b)
{
	if(b->re == 0 && b->im == 0)
	{
		printf("ERROR");
		return NULL;
	}
	 struct Complex *c = malloc(sizeof( struct Complex));
	c->re = ((a.re * b.re) + (a.im * b.im)) / ((b.re * b.re) + (b.im * b.im));
	c->im = ((a.im * b.re) - (a.re * b.im)) / ((b.re * b.re) + (b.im * b.im));
	return c;
}

void div_m( struct Complex *a,  struct Complex *b)
{
	if(b->re == 0 && b->im == 0)
	{
		printf("ERROR");
		return;
	}
	b->re = ((a->re * b->re) + (a->im * b->im)) / ((b->re * b->re) + (b->im * b->im));
	b->im = ((a->im * b->re) - (a->re * b->im)) / ((b->re * b->re) + (b->im * b->im));

}

